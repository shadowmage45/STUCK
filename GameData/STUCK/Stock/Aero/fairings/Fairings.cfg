KSP_TEXTURE_SET
{
	name = Stock-FairingsWhite
	recolorable = true
	//0'th material is always applied to fairing panels in this case due to plugin code
	MATERIAL
	{
		shader = TU/Metallic
		//target the fairing panels specifically
		mesh = FairingPanel
		//set up the texture inputs - stock textures
		texture = _MainTex,Squad/Parts/Aero/fairings/fairings_diff
		texture = _BumpMap,Squad/Parts/Aero/fairings/fairings_normals
		texture = _MaskTex,TU-Examples/fairing/fairingPanel-Mask1
		textureColor = _MetallicGlossMap, 0,0,0,0
		//specify standard parameter values - metal, smooth, etc
		//noop on this?
		//enable keyword driven features
		keyword = TU_STOCK_SPEC
		keyword = TU_RECOLOR
		//recoloring parameters to control color settings
		vector = _DiffuseNorm,0.9255,0.9255,1
		vector = _SmoothnessNorm,1,1,1
		vector = _MetalNorm,0,0,0
	}
	//this one is for the fairing base, it does need 'mesh =' to target only the base mesh
	MATERIAL
	{
		shader = TU/Metallic
		//no clue what this mesh name is... appears to be the model root something/something/etc
		//mesh = whateverTheFairingBaseMeshNameIs
		excludeMesh = FairingPanel
		excludeMesh = Cap01
		excludeMesh = Cap02
		excludeMesh = Cap03
		excludeMesh = Cap04
		excludeMesh = Cap05
		excludeMesh = Cap06
		excludeMesh = Truss1
		excludeMesh = Truss2
		excludeMesh = Truss3
		excludeMesh = Truss4
		excludeMesh = Truss5
		excludeMesh = Truss6
		texture = _MainTex,Squad/Parts/Aero/fairings/FairingBase
		texture = _BumpMap,Squad/Parts/Aero/fairings/FairingBaseNormals
		textureColor = _MetallicGlossMap, 0,0,0,0
		keyword = TU_STOCK_SPEC
	}
	//this texture-set is for the truss setup, it also needs 'mesh=' to target the base mesh
	MATERIAL
	{
		shader = TU/Metallic
		mesh = Cap1
		mesh = Cap2
		mesh = Cap3
		mesh = Cap4
		mesh = Cap5
		mesh = Cap6
		mesh = Truss1
		mesh = Truss2
		mesh = Truss3
		mesh = Truss4
		mesh = Truss5
		mesh = Truss6
		texture = _MainTex,Squad/Parts/Aero/fairings/AutoTruss
		textureColor = _MetallicGlossMap, 0,0,0,0
		float = _Smoothness,0.65
	}
	COLORS
	{
		mainColor = white
		secondColor = ltGray
		detailColor = black
	}
}
//patches to specify other texture sets
//base textures remain unchanged, only panels are updated
+KSP_TEXTURE_SET[Stock-FairingsWhite]
{
	@name = Stock-FairingsGrey
	@MATERIAL,0
	{
		@texture,0 = _MainTex,Squad/Parts/Aero/fairings/fairings_diff_grey
		@texture,1 = _BumpMap,Squad/Parts/Aero/fairings/fairings_grey_normals
		@texture,2 = _MaskTex,TU-Examples/fairing/fairingPanel-Mask2
		@vector,0 = _DiffuseNorm,0.9882,0.9882,1
	}
	-COLORS,*{}	
	COLORS
	{
		mainColor = ltGray
		secondColor = white
		detailColor = black
	}
}
+KSP_TEXTURE_SET[Stock-FairingsWhite]
{
	@name = StockFairingsDkGrey
	@MATERIAL,0
	{
		@texture,0 = _MainTex,Squad/Parts/Aero/fairings/fairings_diff_orange
		@texture,1 = _BumpMap,Squad/Parts/Aero/fairings/fairings_orange_normals
		@texture,2 = _MaskTex,TU-Examples/fairing/fairingPanel-Mask3
		@vector,0 = _DiffuseNorm,0.33,0.4,1
	}
	-COLORS,*{}	
	COLORS
	{
		mainColor = dkGray
		secondColor = orange
		detailColor = black
	}
}
//apply the sets to the fairing parts
@PART[fairingSize1|fairingSize2|fairingSize3]
{
	@MODULE[ModuleProceduralFairing]
	{
		//-TextureURL = delete
		//-TextureNormalURL = delete
	}
	//patch existing stock module with new info
	@MODULE[ModulePartVariants]
	{
		//remove existing textures and info -- TU will handle that end of things
		// new info will be provided below
		@VARIANT,*
		{
			-TEXTURE{}
			-EXTRA_INFO{}
		}
		//patch new info into existing variants to point towards the TU TextureSet
		//that will be used to handle each variants material setup
		@VARIANT[White]
		{
			EXTRA_INFO
			{
				textureSet = Stock-FairingsWhite
			}
		}
		@VARIANT[Grey]
		{
			EXTRA_INFO
			{
				textureSet = Stock-FairingsGrey
			}
		}
		@VARIANT[Dark?Grey]
		{
			EXTRA_INFO
			{
				textureSet = Stock-FairingsDkGrey
			}
		}
	}
	//add the TU PartModule that handles interaction with stock part-variants
	// specify that we want fairing integration - this triggers special plugin code
	// to work with the stock fairing module and its procedural meshes.
	MODULE	
	{
		name = TUPartVariant
		stockFairing = true
	}
	MODULE
	{
		name = SSTURecolorGUI
	}
}